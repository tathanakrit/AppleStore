--These codes will analyze the Apple Store data, resulting in clean data, analysis, and recommendations at the end.

CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4


--CLEAN DATA

--query to check number of unique apps in both tablesAppleStore

SELECt COUNT(DISTINCT id) As UniqueAppIDs
from AppleStore

SELECT count(DISTINCT id) As UniqueAppIDs
from appleStore_description_combined

--query to check missing values in key fields

SELECT COUNT(*) AS MissingValues
FROM AppleStore
Where track_name is NULL or user_rating is NULL OR prime_genre is NULL

SELECT COUNT(*) AS MissingValues
FROM appleStore_description_combined
Where app_desc is NULL 


--query to find out the number of apps per genre

SELECT prime_genre, COUNT(*) AS NumApps
from AppleStore
GROUP BY prime_genre
ORDER by NumApps DESC

--query to get an overview of the apps rating

SELECT min(user_rating) As MinRating,
	   max(user_rating) As MaxRating,
	   avg(user_rating) As AvgRating
From AppleStore

--Analyse data to find the insights
--Select whether paid apps have higher ratings than free apps

SELECT CASE WHEN price > 0 THEN 'Paid'
			else 'Free'
       ENd AS App_type,
       avg(user_rating) AS Avg_Rating
From AppleStore
GROUP by App_Type

--query to check if apps with more supported language have higher ratings 

SELECT CASE When lang_num < 10 then '<10 languages'
			When lang_num  Between 10 and 30 then '10-30 languages'
			else '>30 languages'
       End As language_bucket,
       avg(user_rating) AS Avg_Rating
From AppleStore
GROUP By language_bucket
order by Avg_Rating DESC

--query to check genres with low ratings 

SELECT prime_genre,
	   avg(user_rating) As Avg_rating
from AppleStore
GROUP BY prime_genre
order by Avg_Rating ASC
Limit 10

--query to check if these is correlation between the lenght of the app Description and the app rating 

SELECT case when length(b.app_desc) < 500 Then 'Short'
			when length(b.app_desc) BETWEEN 500 And 1000 Then 'Meduim'
            ELSE 'Long'
       End as description_length_bucket,
       avg(a.user_rating) AS average_rating
       
            
from AppleStore AS A
Join appleStore_description_combined as B 
on a.id = b.id

GROUP by description_length_bucket
order by average_rating DESC

-- Recommendation 
--1.Paid apps tend to receive better ratings for various reasons, notably because they have the financial 
--resources to enhance the customer experience and implement additional improvements.
--2.The number of languages available does not always correlate with an increase in the rating.
--3.Apps with longer descriptions often receive better ratings due to customers might want to know the app's purpose and how to use it effectively.











